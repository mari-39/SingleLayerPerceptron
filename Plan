# TO-DO : find suitable task
# options so far :
 - reduced digit recognition => 0 or 1
 - diagnosing illness with input symptoms => sick or not sick
 - detection of car acceleration
 // inputs has features : posn1, posn2, speed at posn1
         // outputs should predict whether car is accelerating
 //        double[][] inputs = {{0, 1, 1}, {0, 1, 0}, {0, 2, 2}, {0, 3, 3},
 //                {0, 4, 5}, {0, 2, 3}, {0, 6, 6}, {1, 3, 2}, {6, 7, 3}, {8, 11.2, 3.2}};
 //        int[] expectesOutputs = {-1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1};



 - OR - fun => https://towardsdatascience.com/perceptron-learning-algorithm-d5db0deab975


 # IMPORTANT :
 - inputs is 2D, as one input can have multiple features
 - weights is 1D, as each feature has a weight
 => (weight of inputs[0][0] == w. of inputs[1][0]


 # TO-DO 04/09/24 :
 - make better input data
   - make the inputs-arr 3D to permit Vector-input
   - actually generate the data I want to be training with

 - update code so that Perceptron-class is actually used
 - maybe just do a logic gate